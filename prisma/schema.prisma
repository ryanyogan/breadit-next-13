// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique

  image String?

  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  comments           Comment[]
  createdSubbreadits Subbreadit[]   @relation("CreatedBy")
  votes              Vote[]
  commentVotes       CommentVote[]
  subscriptions      Subscription[]
}

model Subbreadit {
  id   String @id @default(cuid())
  name String @unique

  posts Post[]

  creatorId String?
  creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])

  subscribers Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  subbreaditId String
  subbreadit   Subbreadit @relation(fields: [subbreaditId], references: [id])

  @@id([userId, subbreaditId])
  @@index([userId])
  @@index([subbreaditId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content Json?

  comments Comment[]
  votes    Vote[]

  subbreaditId String
  subbreadit   Subbreadit @relation(fields: [subbreaditId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subbreaditId])
  @@index([authorId])
}

model Comment {
  id   String @id @default(cuid())
  text String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  commentId String?
  votes     CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  type VoteType

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model CommentVote {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  type VoteType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commentId])
  @@index([commentId])
  @@index([userId])
}
